- name: get openresty pre-requisites
  ansible.builtin.apt:
    name:
      - wget
      - gnupg
      - ca-certificates
      - luarocks
      - lsb-release
    install_recommends: false
    update_cache: true

- name: add openresty repository
  block:
    - name: get key
      ansible.builtin.get_url:
        url: https://openresty.org/package/pubkey.gpg
        dest: /usr/share/keyrings/openresty

    - name: dearmor key
      ansible.builtin.command:
        cmd: gpg --dearmor /usr/share/keyrings/openresty
        creates: /usr/share/keyrings/openresty.gpg

    - name: add openresty apt repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/openresty.gpg] http://openresty.org/package/ubuntu {{ ansible_lsb.codename }} main
        state: present
        update_cache: true

- name: install openresty
  ansible.builtin.apt:
    name: openresty
    install_recommends: false
    update_cache: true

- name: install lua-resty-acme
  ansible.builtin.command:
    cmd: luarocks install lua-resty-acme
    creates: /usr/local/lib/luarocks/rocks/lua-resty-acme/*/*.rockspec

- name: install luafielsystem
  ansible.builtin.command:
    cmd: luarocks install luafilesystem
    creates: /usr/local/lib/luarocks/rocks/luafilesystem/*/*.rockspec

- name: create account key
  ansible.builtin.command:
    cmd: openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -out /etc/openresty/account.key
    creates: /etc/openresty/account.key

- name: create fallback keys
  ansible.builtin.expect:
    command: openssl req -newkey rsa:2048 -nodes -keyout /etc/openresty/default.key -x509 -days 365 -out /etc/openresty/default.pem
    responses:
      "Country Name.*":
        - US
      "State.*":
        - Washington
      "Locality.*":
        - Seattle
      "Organization Name.*":
        - .
      "Organizational.*":
        - .
      "Common Name.*":
        - Lucy Kowal
      "Email.*":
        - "{{ email }}"
    creates: /etc/openresty/default.key
  vars:
    email: "{{ vault_certbot_email }}"

- name: create openresty config directory
  ansible.builtin.file:
    path: /etc/openresty/conf.d
    state: directory
    mode: "0755"

- name: configure openresty
  ansible.builtin.copy:
    content: |
      user www-data;
      worker_processes auto;

      events {
        worker_connections 1024;
      }

      http {
        include /etc/openresty/mime.types;
        default_type application/octet-stream;

        lua_shared_dict acme 16m;
        lua_shared_dict challenge 16m;

        lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
        lua_ssl_verify_depth 2;

        init_by_lua_block {
              require("resty.acme.autossl").init({
                tos_accepted = true,
                staging = false,
                account_key_path = "/etc/openresty/account.key",
                account_email = "{{ email }}",
                domain_whitelist = { "luuucyyy.net", "*.luuucyyy.net" },
            })
        }

        init_worker_by_lua_block {
            require("resty.acme.autossl").init_worker()
        }

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        gzip on;
        gzip_types text/html text/css text/javascript application/javascript;

        include /etc/openresty/conf.d/*.conf;
      }
    dest: /etc/openresty/nginx.conf
    backup: yes
  vars:
    email: "{{ vault_certbot_email }}"

- name: create docker proxies
  ansible.builtin.copy:
    content: |
      server {
        {% if item.subdomain -%}
        server_name {{ item.subdomain }}.luuucyyy.net;
        {%- else -%}
        server_name luuucyyy.net;
        {%- endif %}

        listen 80;
        listen 443 ssl;

        ssl_certificate /etc/openresty/default.pem;
        ssl_certificate_key /etc/openresty/default.key;

        ssl_certificate_by_lua_block {
          require("resty.acme.autossl").ssl_certificate()
        }

        location /.well-known {
            content_by_lua_block {
                require("resty.acme.autossl").serve_http_challenge()
            }
        }

        location / {
          proxy_pass http://0.0.0.0:{{ item.host_port }}/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_redirect off;
          proxy_buffering off;
        }
      }
    dest: /etc/openresty/conf.d/{{ item.subdomain }}.conf
  loop: "{{ containers }}"

- name: create docker status script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      OUTPUT_FILE="/tmp/docker_status.txt"
      chmod +r "$OUTPUT_FILE"
      /snap/bin/docker ps --format "{{ '{{' }}.Names{{ '}}' }}: {{ '{{' }}.Status{{ '}}' }}" > "$OUTPUT_FILE" 2>&1
      if [ $? -ne 0 ]; then
                  echo "ERROR: Failed to run 'docker ps'. Is Docker daemon running and accessible?" > "$OUTPUT_FILE"
      fi
    dest: /usr/local/bin/update_docker_status.sh
    mode: '777'

- name: create docker health cronjob
  ansible.builtin.cron:
    name: docker ps
    minute: "*/2"
    job: /usr/local/bin/update_docker_status.sh

- name: create health endpoint
  ansible.builtin.copy:
    content: |
      server {
        server_name health.luuucyyy.net;

        listen 80;
        listen 443 ssl;

        ssl_certificate /etc/openresty/default.pem;
        ssl_certificate_key /etc/openresty/default.key;

        ssl_certificate_by_lua_block {
          require("resty.acme.autossl").ssl_certificate()
        }

        location /.well-known {
            content_by_lua_block {
                require("resty.acme.autossl").serve_http_challenge()
            }
        }

        location / {
          default_type text/plain;
          content_by_lua_block {
            local function read_file(path)
               local file = io.open(path, "r")
               if file then
                 local content = file:read("*all")
                 file:close()
                 return content
               else
                 return nil, "Failed to open file: " .. path
               end
            end
            local docker_status_file = "/tmp/docker_status.txt"
            local docker_data, err = read_file(docker_status_file)

            ngx.say("NGINX STATUS")
            ngx.say("=======================================")
            ngx.say("TIME: " .. ngx.utctime() .. " UTC")
            ngx.say("WORKERS: " .. ngx.worker.count())

            if docker_data then
              ngx.say("\nDOCKER STATUS")
              ngx.say("=======================================")
              ngx.say(docker_data)
            else
              ngx.say("ERROR: Could not read Docker status file: " .. err)
            end
          }
        }
      }
    dest: /etc/openresty/conf.d/health.conf

- name: start and enable openresty
  ansible.builtin.systemd:
    name: openresty
    state: restarted
    enabled: yes
